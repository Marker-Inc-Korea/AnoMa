---
apiVersion: v1
kind: Template
labels:
  application: ${APPLICATION_NAME}
metadata:
  name: prometheus-anomaly-detector-image-bc

parameters:
  - description: Application name
    value: 'prometheus-anomaly-detector-prophet-image'
    name: APPLICATION_NAME
    required: true
  - name: GIT_URI
    value: https://github.com/AICoE/prometheus-anomaly-detector.git
    required: true
    description: Name of the Python application file to be run during the job.
  - name: LIMIT_CPU
    value: "1"
    description: Limit number of CPUs allocated to the container
  - name: LIMIT_MEM
    value: "2G"
    description: Limit amount of memory allocated to the container
  - description: "Thoth Environment to use for retrieving advices."
    displayName: "Environment"
    name: "THOTH_HOST"
    required: true
    value: "khemenu.thoth-station.ninja"
  - description: "Thamos enable debug mode."
    name: "THAMOS_DEBUG"
    required: true
    value: "0"
  - description: "Always use the recommended stack by Thoth."
    name: "THOTH_ADVISE"
    required: true
    value: "1"
  - description: "Fallback to the Pipfile.lock present in the repository."
    name: "THOTH_ERROR_FALLBACK"
    required: true
    value: "1"

objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      dockerImageRepository: ${APPLICATION_NAME}
      tags:
        - name: latest
      lookupPolicy:
        local: true

  - apiVersion: v1
    kind: BuildConfig
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      resources:
        limits:
          memory: 4Gi
          cpu: "2"
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        git:
          uri: ${GIT_URI}
        type: Git
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: "DockerImage"
            name: "quay.io/thoth-station/s2i-thoth-ubi8-py36:latest"
          env:
            # Enable Pipenv in OpenShift's s2i.
            - name: "ENABLE_PIPENV"
              value: "1"
            # Disable progressbar for thamos.
            - name: "THAMOS_NO_PROGRESSBAR"
              value: "1"
            # Enable expansion based on environment variables when generating
            # .thoth.yaml file - this needs to be explictly turned on due to
            # possible security implications.
            - name: "THAMOS_CONFIG_EXPAND_ENV"
              value: "1"
            # Do not use cached results, always force analysis on Thoth's side.
            - name: "THAMOS_FORCE"
              value: "1"
            # Run thamos in verbose mode to show what's going on.
            - name: "THAMOS_VERBOSE"
              value: "1"
            # The adviser on Thoth's backend side is run in debug mode, you can
            # obtain logs by running thamos logs <analysis id> or directly on
            # Thoth's user API (the analysis id gets printed into the console
            # during the build process in OpenShift).
            - name: "THAMOS_DEBUG"
              value: "${THAMOS_DEBUG}"
            # Thoth deployment to be used - pass just host, API discovery is
            # performed by Thamos.
            - name: "THOTH_HOST"
              value: "${THOTH_HOST}"
            - name: "THOTH_ADVISE"
              value: "${THOTH_ADVISE}"
            - name: "THOTH_ERROR_FALLBACK"
              value: "${THOTH_ERROR_FALLBACK}"
      triggers:
        - imageChange: {}
          type: ImageChange
        - type: ConfigChange
