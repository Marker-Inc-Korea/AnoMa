---
apiVersion: v1
kind: Template
metadata:
  name: prometheus-anomaly-detector-deployment-template
  annotations:
    description: >
      "This is an application, which collects prometheus metrics
       and predicts their future values using fbprophet"
    openshift.io/display-name: "fbprophet metric prediction"
    version: 0.1.0
    tags: fbprophet,prometheus,metrics,anomaly detection
    template.openshift.io/documentation-url: https://github.com/AICoE/prometheus-anomaly-detector
  labels:
    application: ${APPLICATION_NAME}
    template: ${APPLICATION_NAME}-template
    app: ${APPLICATION_NAME}
parameters:
  - description: The name for application
    value: 'prometheus-anomaly-detector-prophet-test'
    name: APPLICATION_NAME
    required: true
  - name: GIT_URI
    value: "https://github.com/AICoE/prometheus-anomaly-detector.git"
    required: true
  - name: FLT_DEBUG_MODE
    description: "Enable verbose log for debugging"
    value: "False"
    required: false
  - name: FLT_PROM_URL
    description: "url for the prometheus host from where the metrics will be collected"
    required: true
  - name: FLT_PROM_ACCESS_TOKEN
    description: "Oauth token needed to connect to the prometheus host"
    required: false
  - name: FLT_METRICS_LIST
    description: "List of metrics (with labels), that will be collected from prometheus and predicted"
    required: true
    value: >
      "thoth_solver_jobs_seconds{instance='metrics-exporter-thoth-frontend-stage.cloud.paas.upshift.redhat.com:80',
      job='Thoth Metrics (stage)'}"
  - name: FLT_RETRAINING_INTERVAL_MINUTES
    description: "How often should the anomaly detector retrain the model (in minutes)"
    required: true
    value: "15"
  - name: FLT_ROLLING_TRAINING_WINDOW_SIZE
    description: >
      "this will create a rolling data window on which the model will be trained.
       example: if set to 15d will train the model on past 15 days of data"
    required: true
    value: "45d"
  - name: APP_FILE
    description: "python application file name that will be run"
    value: app.py
    required: true
  - name: OC_APP_IMAGE_NAME
    description: "name of the image that should be deployed"
    value: "prometheus-anomaly-detector-prophet-image"
    required: true
objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        deploymentConfig: ${APPLICATION_NAME}
        app: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            deploymentConfig: ${APPLICATION_NAME}
            app: ${APPLICATION_NAME}
        spec:
          containers:
            - env:
                - name: FLT_PROM_URL
                  value: "${FLT_PROM_URL}"
                - name: FLT_PROM_ACCESS_TOKEN
                  value: "${FLT_PROM_ACCESS_TOKEN}"
                - name: FLT_METRICS_LIST
                  value: "${FLT_METRICS_LIST}"
                - name: FLT_RETRAINING_INTERVAL_MINUTES
                  value: "${FLT_RETRAINING_INTERVAL_MINUTES}"
                - name: FLT_ROLLING_TRAINING_WINDOW_SIZE
                  value: "${FLT_ROLLING_TRAINING_WINDOW_SIZE}"
                - name: FLT_DEBUG_MODE
                  value: "${FLT_DEBUG_MODE}"
                - name: APP_FILE
                  value: "${APP_FILE}"
              image: ${APPLICATION_NAME}
              imagePullPolicy: IfNotPresent
              name: ${APPLICATION_NAME}
              resources:
                requests:
                  memory: 1Gi
                  cpu: "2"
                limits:
                  memory: 2Gi
                  cpu: "2"
              terminationMessagePath: /dev/termination-log
          dnsPolicy: ClusterFirst
          restartPolicy: Always
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - ${APPLICATION_NAME}
            from:
              kind: ImageStreamTag
              name: ${OC_APP_IMAGE_NAME}:latest
          type: ImageChange
        - type: ConfigChange

  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
      name: ${APPLICATION_NAME}-service
      labels:
        app: ${APPLICATION_NAME}
    spec:
      ports:
        - port: 8080
          name: http
      selector:
        app: ${APPLICATION_NAME}

  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: ${APPLICATION_NAME}-route
      labels:
        app: ${APPLICATION_NAME}
    spec:
      to:
        kind: Service
        name: ${APPLICATION_NAME}-service
